import React, { Component } from 'react';
import { Link } from 'react-router-dom';
import { connect } from 'react-redux';
import Question from './question-item.component';
import axios from 'axios';
import { MDBContainer, MDBCol, MDBRow, MDBBtn, MDBIcon, MDBInput } from 'mdbreact';
import './questions-list.component.scss';
import './questions-filter.component.css';
var moment = require('moment');

class QuestionsList extends Component {
    constructor(props) {
        super(props);

        this.state = {
            questions: [],
            filter: "",
            search: ""
        }
    }

    componentDidMount = () => {
        axios.get('/questions')
            .then(response => {
                let sortedQuestions = response.data.sort((a, b) => {
                    return (
                        moment().diff(moment(a.createdAt), 'minutes', false) -
                        moment().diff(moment(b.createdAt), 'minutes', false)
                    )
                });
                this.setState({
                    questions: sortedQuestions
                });
            })
            .catch(error => {
                console.log("Error: " + error);
            });
    }

    deleteQuestion = (id) => {
        axios.delete('/questions/' + id)
            .then(response => console.log(response))

        // Update state (_id is autogenerated by MongoDB)
        this.setState({
            questions: this.state.questions.filter(question => question._id !== id)
        })
    }

    onChangeSearch = (e) => {
        this.setState({
            search: e.target.value.toLowerCase()
        });
    };

    onChangeFilter = (e) => {
        this.setState({
            filter: e.target.value
        })
    };

    /* 
    * This method will map the questions array and return a sub-component (Question)
    * for each question in the array
    */
    createQuestionPanels = () => {
        let questions;

        if (this.state.filter.includes("voted")) {
            questions = this.props.questions.sort((a, b) => a.votes - b.votes);
        } else if (this.state.filter.includes("recent")) {
            questions = this.props.questions.sort((a, b) => {
                return (
                    moment().diff(moment(a.createdAt), 'minutes', false) -
                    moment().diff(moment(b.createdAt), 'minutes', false)
                )
            });
        } else if (this.state.filter.includes("answers")) {
            questions = this.props.questions.sort((a, b) => b.answers.length - a.answers.length);
        } else if (this.state.filter === "all" || this.state.filter === "") {
            questions = this.props.questions;
        } else {
            questions = this.props.questions.filter(question => question.sector === this.state.filter);
        }

        if (this.state.search !== "") {
            questions = (
                questions.filter(question => (
                    question.text.toLowerCase().includes(this.state.search) ||
                    question.job.toLowerCase().includes(this.state.search) ||
                    question.company.toLowerCase().includes(this.state.search)
                ))
            )
        } 

        return questions.map(question => {
            return (
                <Question 
                    question={question}
                    deleteQuestion={this.deleteQuestion}
                    key={question._id}
                />
            )
        });
    }

    render() {
        const spinner = (
            <MDBContainer className="d-flex justify-content-center" style={{ marginTop: "50px" }}>
                <div className="spinner-border pink-text" role="status">
                    <span className="sr-only">Loading...</span>
                </div>
            </MDBContainer>
        );

        return (
            <MDBContainer>
                <MDBRow>
                    <MDBCol md="1" />
                    <MDBCol md="3">
                        <MDBInput hint="Search" onChange={this.onChangeSearch} type="text" containerClass="mt-0" />
                    </MDBCol>
                    <MDBCol md="4">
                        <Link className="text-center" to="/create">
                            <MDBBtn className="interviewClubBtn" color="pink" size="md" style={{ width: "100%" }}>
                                <MDBIcon icon="rocket" style={{ marginRight: "10px" }} />
                                Add New Question
                            </MDBBtn>  
                        </Link>  
                    </MDBCol>
                    <MDBCol md="3">
                        <div className="filter">
                            <select itemRef="userInput"
                                className="filter-text"
                                value={this.state.filter}
                                onChange={this.onChangeFilter}
                                required
                            >
                                <option value="" disabled></option>
                                <option value="all">All</option>
                                {
                                    [...new Set(this.props.questions.map(q => q.sector))]
                                    .map(sector => {
                                        return (
                                            <option key={sector} value={sector}>
                                                {sector}
                                            </option>
                                        )
                                    })
                                }
                                <option value="recent">Sort by most recent</option>
                                <option value="top-voted">Sort by top voted</option>
                                <option value="most-answers">Sort by most answers</option>
                            </select>
                            <span className="filter-highlight"></span>
                            <span className="filter-bar"></span>
                            <label className="filter-label">Filter | Sort</label>
                        </div>
                    </MDBCol>
                    <MDBCol md="1" />
                </MDBRow>
                {
                    this.props.fetching
                    ? spinner
                    : this.createQuestionPanels() 
                }  
            </MDBContainer>
        )
    }
}

const mapStateToProps = (state) => {
    return {
        questions: state.questions.questions,
        fetching: state.questions.fetching
    }
}

export default connect(mapStateToProps)(QuestionsList);