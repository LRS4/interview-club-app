import React, { Component } from 'react';
import { connect } from 'react-redux';
import { removeAnswer } from './../../actions/questionsActions';
import { Link } from 'react-router-dom';
import Answer from './answer-item.component';
import { MDBContainer, MDBCol, MDBRow, MDBBtn, MDBIcon, MDBInput } from 'mdbreact';
import '../Questions/questions-list.component.scss'
var moment = require('moment');

class AnswersList extends Component {
    constructor(props) {
        super(props);

        this.state = {
            filter: "",
            search: ""
        }
    }

    deleteAnswer = (id) => {
        // Update redux store state (_id is autogenerated by MongoDB)
        this.props.removeAnswer(this.props.match.params.qid, id);
    }

    onChangeSearch = (e) => {
        this.setState({
            search: e.target.value.toLowerCase()
        });
    };

    onChangeFilter = (e) => {
        this.setState({
            filter: e.target.value
        })
    };

    createAnswerPanels = () => {
        if (this.props.question.answers !== undefined) {
            let answers = this.props.question.answers;

            if (this.state.filter.includes("voted")) {
                answers = answers.sort((a, b) => a.votes - b.votes);
            } else if (this.state.filter.includes("recent")) {
                answers = answers.sort((a, b) => {
                    return (
                        moment().diff(moment(a.createdAt), 'minutes', false) -
                        moment().diff(moment(b.createdAt), 'minutes', false)
                    )
                });
            } else if (this.state.filter === "all" || this.state.filter === "") {
                answers = this.props.question.answers;
            } else {
                answers = answers.filter(answers => answers.sector === this.state.filter);
            }

            if (this.state.search !== "") {
                answers = (
                    answers.filter(answer => (
                        answer.text.toLowerCase().includes(this.state.search) ||
                        answer.job.toLowerCase().includes(this.state.search) ||
                        answer.company.toLowerCase().includes(this.state.search)
                    ))
                )
            }

            return answers.map(answer => {
                return (
                    <Answer 
                        qid={this.props.match.params.qid}
                        answer={answer}
                        deleteAnswer={this.deleteAnswer}
                        key={answer._id}
                    />
                );
            })
        } 
    }

    render() {
        const answers = this.props.question.answers;
        return (
            this.props.question === undefined ? window.location = '/' :
            <MDBContainer>
                <MDBRow>
                    <MDBCol md="1" />
                    <MDBCol md="3">
                        <MDBInput hint="Search" onChange={this.onChangeSearch} type="text" containerClass="mt-0" />
                    </MDBCol>
                    <MDBCol md="4">
                        <Link className="text-center" to={"/create/" + this.props.match.params.qid}>
                            <MDBBtn className="interviewClubBtn" color="pink" size="md" style={{ width: "100%" }}>
                                <MDBIcon icon="rocket" style={{ marginRight: "10px" }} />
                                Add New Answer
                            </MDBBtn>  
                        </Link>  
                    </MDBCol>
                    <MDBCol md="3">
                        <div className="filter">
                            <select itemRef="userInput"
                                className="filter-text"
                                value={this.state.filter}
                                onChange={this.onChangeFilter}
                                required
                            >
                                <option value="" disabled></option>
                                <option value="all">All</option>
                                {
                                    [...new Set(answers.map(a => a.sector))]
                                    .map(sector => {
                                        return (
                                            <option key={sector} value={sector}>
                                                {sector}
                                            </option>
                                        )
                                    })
                                }
                                <option value="recent">Sort by most recent</option>
                                <option value="top-voted">Sort by top voted</option>
                            </select>
                            <span className="filter-highlight"></span>
                            <span className="filter-bar"></span>
                            <label className="filter-label">Filter | Sort</label>
                        </div>
                    </MDBCol>
                    <MDBCol md="1" />
                </MDBRow>
                <MDBRow className="d-flex justify-content-center">
                    <h1>{ this.props.question.text }</h1>
                </MDBRow>
                { this.createAnswerPanels() }  
            </MDBContainer>
        )
    }
}

const mapStateToProps = (state, ownProps) => {
    let id = String(ownProps.match.params.qid);
    return {
        question: state.questions.questions.find(question => question._id === id)
    }
}

const mapDispatchToProps = (dispatch) => {
    return {
        removeAnswer: (qid, id) => dispatch(removeAnswer(qid, id))
    };
}

export default connect(mapStateToProps, mapDispatchToProps)(AnswersList);